리스트 관련 기타 메서드

append() , 변수명.append() , 리스트에 원소를 하나 삽입할 때 사용한다 O(1)
sort() , 변수명.sort() 기본 정렬 기능으로 오름차순으로 정렬한다
         변수명.sort(reverse = True) 내림차순으로 정렬한다   O(NlogN)
reverse(), 변수명.reverse() 리스트의 원소의 순서를 모두 뒤집어 놓는다 O(N)
insert() , 변수명.insert(삽입할 위치 인덱스, 삽입할 값) 특정한 인덱스 위치에 원소를 삽입할 때 사용한다 O(N)
count(), 변수명.count(특정 값) 리스트에서 특정한 값을 가지는 데이터의 개수를 셀 때 사용한다 O(N)
remove(), 변수명.remove(특정 값) 특정한 값을 갖는 원소를 제거하는데, 값을 가진 원소가 여러 개면 하나만 제거한다 O(N)

a = [1,2,3,4,5,5,5]
remove_set = { 3,5}

result = [i for i in a if i not in remove_set]
print(result)

[1,2,4]

파이썬의 문자열은 내부적으로 리스트와 같이 처리된다

튜플 자료형
파이썬의 튜플 자료형은 리스트와 거의 비슷한다 다음과 같은 차이가 있다.

* 튜플은 한 번 선언된 값을 변경할 수 없다.
* 리스트는 대괄호[] 를 이용하지만 튜플은 소괄호 ()를 이용한다
* 튜플은 리스트에 비해 상대적으로 공간 효율적이고, 일반적으로 각 원소의 성질이 서로 다를 때 주로 사용한다
* 흔히 다익스트라 최단 경로 알고리즘에서는 '비용'과 '노드 번호'라는 서로 다른 성질의 데이터를
(비용, 노드번호)의 형태로 함께 튜플로 묶어서 관리하는 것이 관례이다.

사전 자료형
사전 자료형은 키key와 값value의 쌍을 데이터로 가지는 자료형이다.
* 사전 자료형에 특정한 원소가 있는지 검사할 때는 '원소 in 사전'의 형태를 사용할 수 있다.

사전 자료형 관련 함수
사전 자료형을 잘 이용하기 위해서는 이와 관련한 다양한 함수에 대해서 알아야한다
대표적으로는 키와 값을 별도로 뽑아내기 위한 함수가 있다.
키 데이터만 뽑아서 리스트로 이용할 때는 keys() 함수를 이용하며
값 데이터만 뽑아서 리스트로 이용할 때는 values() 함수를 이용한다

집합 자료형 소개
파이썬에서는 집합 (set)을 처리하기 위한 집합 자료형을 제공하고 있다. 집합은 기본적으로 리스트 
혹은 문자열을 이용해서 만들 수 있는데, 집합은 다음과 같은 특징이 있다.
- 중복을 허용하지 않는다
- 순서가 없다

* '특정한 데이터가 이미 등장한 적이 있는지 여부'를 체크할 때 매우 효과적이다.

# 집합 자료형 초기화 방법1
data = set([1,2,3,4,4,5])

# 집합 자료형 초기화 방법2
data = {1,2,3,4,4,5}

집합 자료형의 연산
집합 자료형 데이터 사이에서 합집합을 계산할 때는 '|'를 이용한다
교집합은 '&' 차집합은 '-'를 이용한다

집합 자료형 관련 함수
하나의 집합 데이터에 값을 추가할 때는 add() 함수를 이용할 수 있다.
update() 함수는 여러 개의 값을 한꺼번에 추가하고자 할때 사용한다.

[조건문]
파이썬에서 조건문을 작성할 때는 if ~ elif ~ else 문을 이용한다

ex)

if 조건문 1:
    조건문 1이 True일 때 실행되는 코드
elif 조건문 2:
    조건문 1에 해당하지 않고, 조건문 2가 True일 때 실행되는 코드
else:
    위의 모든 조건문이 모두 True 값이 아닐 때 실행되는 코드

X in 리스트 : 리스트 안에 X가 들어가 있을때 참이다
X not in 문자열 : 문자열 안에 X가 들어가 있지 않을 때 참이다.

파이썬에서는 조건문의 값이 참이라고 해도, 아무것도 처리하고 싶지 않을 때 pass 문을 이용할수 있음

ex)

score = 85

if score >=80:
    pass
else:
    print('성적이 80점 미만입니다.')


a = [1,2,3,4,5,5,5]
remove_set = {3,5}
result = [i for i in a if i not in remove_set]

print(result)

[반복문]
반복문은 특정한 소스코드를 반복적으로 실행하고자 할 때 사용할 수 있다.
파이썬에서는 while 문 for 문이 있다.

while문
while문은 조건문이 참일 때에 한해서, 반복적으로 코드가 수행된다

ex) 1부터 9까지의 수 중에서 홀수만 더하고자 할 때는 어떻게 할 수 있을까?
i = 1
result = 0

# i가 9보다 작거나 같을 때 아래 코드를 반복적으로 실행

while i <= 9:
    if i % 2 == 1:
        reulst += i
    i+= 1
print(result)

for문
ex) 1부터 9까지의 수 의 합을 구하고자 할때
result = 0

for i in range(1,10):
    result+=i
print(result)

[함수]

def add (a,b):
    return a+b

#일반적인 add() 메서드 사용

#람다 표현식으로 구현한 add() 메서드
print((lambda a,b: a+b)(3,7))\

list(map(int, input().split())) 의 동작과정
*가장 먼저 input() 으로 입력받은 문자열을 split()을 이용해 공백으로 나눈 리스트로 바꾼 뒤에, map을
이용하여 해당 리스트의 모든 원소에 int() 함수를 적용한다
최종적으로 그 결과를 list()로 바꿈으로써 입력받은 문자열을 띄어쓰기로 구분하여 가각 숫자 자료형으로 저장하게 되는 것이다.

파이썬의 기본 input() 함수는 동작 속도가 느려서 시간 초과로 오답 판정을 받을 수 있기 때문에 이 경우
파이썬의 sys라이브러리에 정의되어 있는 sys.stdin.readline() 함수를 이용한다.
sys 라이브러리를 사용할 때는 한 줄 입력을 받고 나서 rstrip() 함수를 꼭 호출해야 한다.
readline()으로 입력하면 입력 후 엔터가 줄 바꿈 기호로 입력되는데, 이 공백 문자를 제거하려면
rstrip() 함수를 사용해야 한다.

print()는 기본저그올 출력 이후에 줄 바꿈을 수행한다.

파이썬 3.6 이상의 버전 부터 f-string 문법을 사용할 수 있다.

answer = 7
print(f"정답은 {answer} 입니다.")

[주요 라이브러리의 문법과 유의점]
표준 라이브러리란 특정한 프로그래밍 언어에서 자주 사용되는 표준 소스코드를 미리 구현해 놓은 라이브러리를 의미한다.

내장함수: print(), input() 과 같은 기본 입출력 기능부터 sorted()와 같은 정렬 기능을 포함하고 있는 기본 내장 라이브러리이다.

itertools: 파이썬에서 반복도ㅓㅣ는 형태의 데이터를 처리하는 기능을 제공하는 라이브러리이다. 순열과 조합 라이브러리를 제공한다

heapq: 힙(Heap) 기능을 제공하는 라이브러리이다. 우선순위 큐 기능을 구현하기 위해 사용한다

bisect: 이진탐색(Binary Search) 기능을 제공하는 라이브러리이다.

collections: 덱(deque) , 카운터(counter) 등의 유용한 자료구조를 포함하고 있는 라이브러리이다.

math: 필수적인 수학적 기능을 제공하는 라이브러리이다. 팩토리얼, 제곱근, 최대공약수(GCD), 삼각함수 관련 함수부터 파이(pi)와 같은 상수를 포함하고 있다.

내장함수

먼저 sum() 함수는 리스트와 같은 iterable 객체가 입력으로 주어졌을때, 모든 원소의 합을 반환한다.

min() 함수는 파라미터가 2개 이상 들어왔을 때 가장 작은 값을 반환한다

max() 함수는 가장 큰 값을 반환한다.

eval 함수는 수학 수식이 문자열 형식으로 들어오면 해당 수식을 계산한 결과를 반환한다.

sorted() 함수는 iterable 객체가 들어왔을 때, 정렬된 결과를 반환한다 

key 속성으로 정렬 기준을 명시할 수 있으며 reverse 속성으로 정렬된 결과 리스트를 뒤집을지의 여부를 설정할 수 있다.

itertools

코딩테스트에서 가장 유용하게 사용할 수 있는 클래스는 permutations, combinations이다 

permutations는 리스트와 같은 iterable 객체에서 r개의 데이터를 뽑아 일렬로 나열하는 모든 경우(순열)를 계산해준다
permutations는 클래스이므로 객체 초기화 이후에는 리스트 자료형으로 변환하여 사용한다
리스트 ['A','B','C']에서 3개 (r=3)를 뽑아 나열하는 모든 경우를 출력하는 예시는 다음과 같다.

from itertools import permutations
data= ['A','B','C'] 
result = list(permutations(data,3))
print(result)

product는 permutations와 같이 리스트와 같은 iterable 객체에서 r개의 데이터를 뽑아 일렬로 나열하는 모든 경우(순열)를 계산한다
다만 원소를 중복하여 뽑는다.
product 객체를 초기화할 때는 뽑고자 하는 데이터의 수를 repeat 속성값으로 넣어준다.

from itertools import product
data = ['A','B','C']
result = list(product(data,repeat=2))

print(result)

combinations_with_replacement는 combinations와 같이 리스트와 같은 iterable 객체에서 r개의 데이터를 뽑아 순서를 고려하지 않고 나열하는 모든 경우(조합)
를 계산한다. 다만 원소를 중복해서 뽑는다. combinations_with_replacement 는 클래스이므로 객체 초기화 이후에는 리스트 자료형으로 변환하여 사용해야 한다.

from itertools import combinations_with_replacement
data = ['A','B','C'] 
result = list(combinations_with_replacement(data,2))

print(result)

heapq
파이썬에서는 힙 기능을 위해 heapq라이브러리를 제공한다. heapq는 다익스트라 최단 경로 알고리즘을 포함해 다양한 알고리즘에서 우선순위 큐 기능을 구현하고자 할때 사용

