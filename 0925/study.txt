[다이나믹 프로그래밍]
메모리 공간을 약간 더 사용하면 연산 속도를 비약적으로 증가시킬 수 있는 방버
대표적인 방법이 다이나믹 프로그래밍 기법으로 동적 계획법이라고 표현한다
(탑다운, 바텀업) + 메모이제이션 기법

다이나믹 프로그래밍으로 해결할 수 있는 대표적인 예시
피보나치 수열

1 1 2 3 5 8 13 21 34 55 89 ...

n번째 피보나치 수 = (n-1)번째 피보나치 수 + (n-2)번째 피보나치 수
단, 1번째 피보나치 수 = 1,2번째 피보나치 수 = 1

[메모이제이션]
메모이제이션은 다이나믹 프로그래밍을 구현하는 방법 중 한 종류로
한 번 구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면
메모한 결과를 그대로 가져오는 기법을 의미한다.
메모이제이션은 값을 저장 하는 방법이므로 캐싱이라고도 한다

[탑다운]
- 큰 문제를 해결하기 위해 작은 문제를 호출
[바텀업]
- 작은 문제부터 차근차근 답을 도출한다고 하여 바텀업

[최단 경로]
최단 경로 알고리즘은 말 그대로 가장 짧은 경로를 찾는 알고리즘이다

[다익스트라 최단 경로 알고리즘]
다익스트라 최단 경로 알고리즘은 그래프에서 여러 개의 노드가 있을 때,
특정한 노드에서 출발하여 다른 노드로 가는 각각의 최단 경로를 구해주는 알고리즘이다.
다익스트라 최단 경로 알고리즘은 '음의 간선'이 없을 때 정상적으로 동작한다.
'음의 간선': 0보다 작은 값을 가지는 간선을 의미이다
다익스트라 최단 경로 알고리즘은 기본적으로 그리디 알고리즘으로 분류
매번 '가장 비용이 적은 노드'를 선택해서 임의의 과정을 반복

1. 출발 노드를 설정한다
2. 최단 거리 테이블을 초기화한다
3. 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택
4. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신한다.
5. 3~4번을 반복
<특징>
다익스트라 알고리즘은 최단 경로를 구하는 과정에서
'각 노드에 대한 현재까지의 최단 거리' 정보를 항상
1차원 리스트에 저장하며 리스트를 계속 갱신한다는 특징이 있다.

다익스트라 알고리즘을 구현하는 방법 2가지
1. 구현하기 쉽지만 느리게 동작하는 코드
2. 구현하기에 조금 더 까다롭지만 빠르게 동작하는 코드

다익스트라 알고리즘이 진행되면서 한 단계땅 하나의 노드에 대한
최단 거리를 확실히 찾는 것으로 이해

방법 1. 간단한 다익스트라 알고리즘
간단한 다익스트라 알고리즘은 O(V^2)의 시간 복잡도를 가진다.
여기서 v는 노드의 개수를 의미한다

1-1. 처음에 각 노드에 대한 최단 거리를 담는 1차원 리스트를 선언
1-2. 단계마다 '방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택'
하기 위해 매 단계마다 1차원 리스트의 모든 원소를 확인(순차 탐색)한다.

노드의 개수 및 간선의 개수가 많을 때는 이이서 설명할 '개선된 다익스트라 알고리즘'을 이용해야 한다

방법2 개선된 다익스트라 알고리즘
여기서 v는 노드의 노드의 개수 e는 간선의 개수를 의미한다.
개선된 다익스트라 알고리즘에서는 힙 자료구조를 사용한다.
힙 자료구조를 이용하게 되면 특정 노드까지의 최단 거리에 대한 정보를 힙에 담아서 처리
하므로 출발 노드로부터 가장 거리가 짧은 노드를 더욱 빠르게 찾을 수 있다.

[힙 설명]
힙 자료구조에 대해서 간단히 알아보자. 힙 자료구조는 우선순위 큐를 구현하기 위하여 사용하는
자료구조 중 하나다
스택은 가장 나중에 삽입된 데이터를 가장 먼저 삭제하고, 큐는 가장 먼저 삽입 된
데이터를 가장 먼저 삭제한다
우선순위 큐는 우선순위가 가장 높은 데이터를 가장 먼저 삭제한다는 점이 특징이다.

자료구조 :   추출되는 데이터
스택        가장 나중에 삽입된 데이터
큐          가장 먼저 삽입된 데이터
우선순위 큐  가장 우선순위가 높은 데이터

이러한 우선순위 큐는 데이터를 우선순위에 따라 처리하고 싶을 때 사용한다.

파이썬에서는 우선순위 큐가 필요할때 Priority Queue 혹은 heapq 를 사용할 수 있는데,
이 두 라이브러리는 모두 우선순위 큐 기능을 지원한다.

우선순위 값을 표현할 때는 일반적으로 정수형 자료형의 변수가 사용된다.
예를 들어 물건 정보가 있고, 이 물건 정보는 물건의 가치와 물건의 무게로만 구성된다고 가정해보자.
그러면 모든 물건 데이터를 (가치, 물건)으로 묶어서 우선순위 큐 자료구조에 넣을 수 있따.
이후에 우선순위 큐에서 물건을 꺼내게 되면, 항상 가치가 높은 물건이 먼저 나오게 된다.

대부분의 프로그래밍 언어에서는 우선순위 큐 라이브러리에 데이터의 묶음을 넣으면,
첫 번째 원소를 기준으로 우선순위를 설정한다.

또한 우선순위 큐를 구현할 때는 내부적으로 최소 힙 혹은 최대 힙을 이용한다
최소 힙을 아용하는 경우 값이 낮은 데이터가 먼저 삭제
최대 힙을 이용하는 경우 값이 큰 데이터가 먼저 삭제

파이썬 라이브러리에서는 기본적으로 최소 힙 구조를 이용하는데 다익스트라 최단 경로 알고리즘에서는 비용이
적은 노드를 우선하여 방문하므로 최소 힙 구조를 기반으로 하는 파이썬의 우선순위 큐 라이브러리를 그대로 
사용하면 적합하다

또힌 최소 힙을 최대 힙 처럼 사용하기 위해서 일부러 우선순위에 해당하는 값에 음수 부호 
(-)를 붙여서 넣었다가, 나중에 우선순위 큐에서 꺼낸 다음에 다시 음수 부호(-)를 붙여서 원래의 값으로 돌리는
방식을 사용할 수 있다.

[플로이드 워셜 알고리즘]
다익스트라 알고리즘은 '한 지점에서 다른 특정 지점까지의 최단 경로를 구해야 하는 경우'
에 사용할수 있는 최단 경로 알고리즘이다.
플로이드 워셜 알고리즘은 '모든 지점에서 다른 모든 지점까지의 최단 경로를 모두 구해야 하는 경우'
에 사용할 수 있는 알고리즘이다.

그래프의 구현 방법
인접 행렬: 2차원 배열을 사용하는 방식
인접 리스트: 리스트를 사용하는 방식
